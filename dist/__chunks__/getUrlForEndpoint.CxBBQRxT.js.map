{"version":3,"file":"getUrlForEndpoint.CxBBQRxT.js","sources":["../../src/helpers/sidekick/getOrigin.ts","../../src/app/utils/getUrlForEndpoint.ts"],"sourcesContent":["import { isSidekickLibraryActive } from './isSidekickLibraryActive';\n\n/**\n * Returns the true origin of the current page in the browser.\n * If the page is running in an iframe with srcdoc, the ancestor origin is returned.\n * @returns {String} The true origin\n *\n * @example\n * const origin = getOrigin();\n *\n * @remarks\n * Needs to be used when the Sidekick Library Plugin is in use.\n */\nexport function getOrigin(): string {\n  return isSidekickLibraryActive() ? window.parent.location.origin : window.location.origin;\n}\n","import { getOrigin } from '../../helpers/sidekick/getOrigin';\n\n/**\n * Constructs a complete URL for a given endpoint relative to the base URL.\n * The base URL is derived from `window.hlx.codeBasePath` and the current location.\n * This helper respolves URLs for assets in different AEM contexts. (author, publish, local development, sidekick library etc.)\n * @param {string} endpoint - The endpoint of the asset or fetch request.\n * @returns {URL} - The complete URL for the given endpoint.\n *\n * @example\n * // Assuming window.hlx.codeBasePath is '/base/path/' and the origin is 'https://example.com'\n * const url = getUrlForEndpoint('/api/data');\n * console.log(url.href); // Output: 'https://example.com/base/path/api/data'\n */\nexport const getUrlForEndpoint = (endpoint: string): URL | never => {\n  try {\n    const location = getOrigin();\n    const basePath = window.hlx.codeBasePath.endsWith('/') ? window.hlx.codeBasePath : `${window.hlx.codeBasePath}/`;\n    let normalizedEndpoint = endpoint;\n\n    if (endpoint.startsWith('./')) {\n      normalizedEndpoint = endpoint.substring(2);\n    } else if (endpoint.startsWith('/')) {\n      normalizedEndpoint = endpoint.substring(1);\n    }\n\n    const fullPath = `${basePath}${normalizedEndpoint}`;\n    const url = new URL(fullPath, location);\n\n    return url;\n  } catch (error) {\n    throw new Error(`Failed to build Url for endpoint: ${error}`);\n  }\n};\n"],"names":["getOrigin","isSidekickLibraryActive","getUrlForEndpoint","endpoint","location","basePath","normalizedEndpoint","fullPath","error"],"mappings":"0DAaO,SAASA,GAAoB,CAClC,OAAOC,IAA4B,OAAO,OAAO,SAAS,OAAS,OAAO,SAAS,MACrF,CCDa,MAAAC,EAAqBC,GAAkC,CAC9D,GAAA,CACF,MAAMC,EAAWJ,IACXK,EAAW,OAAO,IAAI,aAAa,SAAS,GAAG,EAAI,OAAO,IAAI,aAAe,GAAG,OAAO,IAAI,YAAY,IAC7G,IAAIC,EAAqBH,EAErBA,EAAS,WAAW,IAAI,EACLG,EAAAH,EAAS,UAAU,CAAC,EAChCA,EAAS,WAAW,GAAG,IACXG,EAAAH,EAAS,UAAU,CAAC,GAG3C,MAAMI,EAAW,GAAGF,CAAQ,GAAGC,CAAkB,GAG1C,OAFK,IAAI,IAAIC,EAAUH,CAAQ,QAG/BI,EAAO,CACd,MAAM,IAAI,MAAM,qCAAqCA,CAAK,EAAE,CAC9D,CACF"}